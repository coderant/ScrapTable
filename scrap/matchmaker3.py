#!/usr/bin/pythonfrom __future__ import divisionimport getoptimport reimport sysimport jellyfishout_delimiter = ','def cleanlist(list):    if "RESTAURANT" in list:        list.remove("RESTAURANT")    if "BAR" in list:        list.remove("BAR")    if "GRILL" in list:        list.remove("GRILL")    if "CAFE" in list:        list.remove("CAFE")    if "CLUB" in list:        list.remove("CLUB")    if "KITCHEN" in list:        list.remove("KITCHEN")    if "PIZZA" in list:        list.remove("PIZZA")    if "CUISINE" in list:        list.remove("CUISINE")    if "BISTRO" in list:        list.remove("BISTRO")    if "BURGERS" in list:        list.remove("BURGERS")    if "AND" in list:        list.remove("AND")    if "SOHO" in list:        list.remove("SOHO")    if "TRIBECA" in list:        list.remove("TRIBECA")    if "&" in list:        list.remove("&")    if "SUSHI" in list:        list.remove("SUSHI")    if "COLUMBUS" in list:        list.remove("COLUMBUS")    if "MADISON" in list:        list.remove("MADISON")    #	if "HOUSE" in list:    #		list.remove("HOUSE")    if "BURGER" in list:        list.remove("BURGER")    if "INC" in list:        list.remove("INC")    if "LOUNGE" in list:        list.remove("LOUNGE")    if "AT" in list:        list.remove("AT")    if "OR" in list:        list.remove("OR")    if "THE" in list:        list.remove("THE")    if "OF" in list:        list.remove("OF")    if "BY" in list:        list.remove("BY")    if "STEAKHOUSE" in list:        list.remove("STEAKHOUSE")    if "ITALIAN" in list:        list.remove("ITALIAN")    if "RISTORANTE" in list:        list.remove("RISTORANTE")    if "THAI" in list:        list.remove("THAI")    if "WINE" in list:        list.remove("WINE")    return listdef process(master, using, outputfilename):    masterl = {}    usingl = {}    with open(master) as masterf:        data = masterf.read().splitlines()        for line in data[1:]:            fields = line.split(out_delimiter)            fields[0] = re.sub('["]', '', fields[0])            masterl[fields[1]] = fields[0]    with open(using) as usingf:        data = usingf.read().splitlines()        for line in data[1:]:            fields = line.split(out_delimiter)            fields[0] = re.sub('["]', '', fields[0])            usingl[fields[1]] = fields[0]    with open(outputfilename, 'w') as outfile:        line = "name_ot, name_doh, id_ot, id_doh, matchtype, jaro, leven, partfull1, partfull2 \n"        outfile.write(line)        j = 0        k = 0        l = 0        for keyu in usingl.keys():            for keym in masterl.keys():                if masterl[keym] == usingl[keyu]:                    j = j + 1                    # print "Restaurant {0} found in both. It's ID is {1}".format(usingl[keyu], keym)                    jaro = 1                    leven = 0                    overm = 1                    overu = 1                    line = "{},{},{},{},0,{},{},{},{} \n".format(usingl[keyu], masterl[keym], keyu, keym, jaro, leven,                                                                 overm, overu)                    outfile.write(line)                else:                    #				print masterl[keym]                    #				print usingl[keyu]                    comp1 = masterl[keym].split()                    comp2 = usingl[keyu].split()                    comp1 = cleanlist(comp1)                    comp2 = cleanlist(comp2)                    #				print comp1                    #				print comp2                    try:                        lencomp1 = len(comp1)                        lencomp2 = len(comp2)                        #				print lencomp1                        #					print lencomp2                        cc = 0                        for ccomp1 in comp1:                            for ccomp2 in comp2:                                if ccomp1 == ccomp2:                                    cc = cc + 1                        if lencomp1 > 0:                            overm = cc / float(lencomp1)                        else:                            overm = 0                        if lencomp2 > 0:                            overu = cc / float(lencomp2)                        else:                            overu = 0                        if overm == 1:                            l = l + 1                        if overu == 1:                            l = l + 1                    except:                        cc = 0                    #				print overm                    #				print overu                    if cc > 0:                        k = k + 1                        jaro = jellyfish.jaro_distance(unicode(masterl[keym], "UTF-8"), unicode(usingl[keyu], "UTF-8"))                        leven = jellyfish.levenshtein_distance(unicode(masterl[keym], "UTF-8"),                                                               unicode(usingl[keyu], "UTF-8"))                        line = "{},{},{},{},0,{},{},{},{} \n".format(usingl[keyu], masterl[keym], keyu, keym, jaro,                                                                     leven, overm, overu)                        outfile.write(line)    print "There are a total of {0} perfect matches".format(j)    print "There are a total of {0} partial matches type 1".format(k)    print "There are a total of {0} partial matches type 2".format(l)usage = "matchmaker.py -m <masterfile> -u <usingfile> -o <outfile>"def main(argv):    master = None    using = None    outputfilename = None    try:        opts, args = getopt.getopt(sys.argv[1:], "hm:u:o", ["help", "master=", "using=", "ofile="])        for opt, arg in opts:            if opt == '-h':                print usage                sys.exit()            elif opt in ("-m", "--master"):                master = arg            elif opt in ("-u", "--using"):                using = arg            elif opt in ("-o", "--ofile"):                outputfilename = arg    except getopt.GetoptError:        print usage        sys.exit(2)    except:        print usage        sys.exit(3)    if master == None:        print "ERROR: no master file provided, use OTparser.py -h for help"        sys.exit(4)    if using == None:        print "ERROR: no using file provided, use OTparser.py -h for help"        sys.exit(4)    try:        with open(master):            pass    except IOError:        print "ERROR: master file '{0}' doesn't exist, can't continue".format(inputfilename)        sys.exit(7)    try:        with open(using):            pass    except IOError:        print "ERROR: using file '{0}' doesn't exist, can't continue".format(inputfilename)        sys.exit(7)    try:        with open(outputfilename):            print "output file '{0}' already exists, will rewrite".format(outputfilename)            z = raw_input("Continue y/n? ")            if z == "y":                pass            else:                sys.exit(8)    except IOError:        pass    process(master, using, outputfilename)if __name__ == "__main__":    main(sys.argv[1:])